from PIL import Image
from tkinter import filedialog
import numpy as np
import os

# Full VGA 256-color palette (RGB values)
VGA_PALETTE = [
(0, 0, 0), (0, 2, 170), (20, 170, 0), (0, 170, 170), (170, 0, 3), (170, 0, 170), (170, 85, 0), (170, 170, 170),
(85, 85, 85), (85, 85, 255), (85, 255, 85), (85, 255, 255), (255, 85, 85), (253, 85, 255), (255, 255, 85), (255, 255, 255),
(0, 0, 0), (16, 16, 16), (32, 32, 32), (53, 53, 53), (69, 69, 69), (85, 85, 85), (101, 101, 101), (117, 117, 117),
(138, 138, 138), (154, 154, 154), (170, 170, 170), (186, 186, 186), (202, 202, 202), (223, 223, 223), (239, 239, 239), (255, 255, 255),
(0, 4, 255), (65, 4, 255), (130, 3, 255), (190, 2, 255), (253, 0, 255), (254, 0, 190), (255, 0, 130), (255, 0, 65),
(255, 0, 8), (255, 65, 5), (255, 130, 0), (255, 190, 0), (255, 255, 0), (190, 255, 0), (130, 255, 0), (65, 255, 1),
(36, 255, 0), (34, 255, 66), (29, 255, 130), (18, 255, 190), (0, 255, 255), (0, 190, 255), (1, 130, 255), (0, 65, 255),
(130, 130, 255), (158, 130, 255), (190, 130, 255), (223, 130, 255), (253, 130, 255), (254, 130, 223), (255, 130, 190), (255, 130, 158),
(255, 130, 130), (255, 158, 130), (255, 190, 130), (255, 223, 130), (255, 255, 130), (223, 255, 130), (190, 255, 130), (158, 255, 130),
(130, 255, 130), (130, 255, 158), (130, 255, 190), (130, 255, 223), (130, 255, 255), (130, 223, 255), (130, 190, 255), (130, 158, 255),
(186, 186, 255), (202, 186, 255), (223, 186, 255), (239, 186, 255), (254, 186, 255), (254, 186, 239), (255, 186, 223), (255, 186, 202),
(255, 186, 186), (255, 202, 186), (255, 223, 186), (255, 239, 186), (255, 255, 186), (239, 255, 186), (223, 255, 186), (202, 255, 187),
(186, 255, 186), (186, 255, 202), (186, 255, 223), (186, 255, 239), (186, 255, 255), (186, 239, 255), (186, 223, 255), (186, 202, 255),
(1, 1, 113), (28, 1, 113), (57, 1, 113), (85, 0, 113), (113, 0, 113), (113, 0, 85), (113, 0, 57), (113, 0, 28),
(113, 0, 1), (113, 28, 1), (113, 57, 0), (113, 85, 0), (113, 113, 0), (85, 113, 0), (57, 113, 0), (28, 113, 0),
(9, 113, 0), (9, 113, 28), (6, 113, 57), (3, 113, 85), (0, 113, 113), (0, 85, 113), (0, 57, 113), (0, 28, 113),
(57, 57, 113), (69, 57, 113), (85, 57, 113), (97, 57, 113), (113, 57, 113), (113, 57, 97), (113, 57, 85), (113, 57, 69),
(113, 57, 57), (113, 69, 57), (113, 85, 57), (113, 97, 57), (113, 113, 57), (97, 113, 57), (85, 113, 57), (69, 113, 58),
(57, 113, 57), (57, 113, 69), (57, 113, 85), (57, 113, 97), (57, 113, 113), (57, 97, 113), (57, 85, 113), (57, 69, 114),
(81, 81, 113), (89, 81, 113), (97, 81, 113), (105, 81, 113), (113, 81, 113), (113, 81, 105), (113, 81, 97), (113, 81, 89),
(113, 81, 81), (113, 89, 81), (113, 97, 81), (113, 105, 81), (113, 113, 81), (105, 113, 81), (97, 113, 81), (89, 113, 81),
(81, 113, 81), (81, 113, 90), (81, 113, 97), (81, 113, 105), (81, 113, 113), (81, 105, 113), (81, 97, 113), (81, 89, 113),
(0, 0, 66), (17, 0, 65), (32, 0, 65), (49, 0, 65), (65, 0, 65), (65, 0, 50), (65, 0, 32), (65, 0, 16),
(65, 0, 0), (65, 16, 0), (65, 32, 0), (65, 49, 0), (65, 65, 0), (49, 65, 0), (32, 65, 0), (16, 65, 0),
(3, 65, 0), (3, 65, 16), (2, 65, 32), (1, 65, 49), (0, 65, 65), (0, 49, 65), (0, 32, 65), (0, 16, 65),
(32, 32, 65), (40, 32, 65), (49, 32, 65), (57, 32, 65), (65, 32, 65), (65, 32, 57), (65, 32, 49), (65, 32, 40),
(65, 32, 32), (65, 40, 32), (65, 49, 32), (65, 57, 33), (65, 65, 32), (57, 65, 32), (49, 65, 32), (40, 65, 32),
(32, 65, 32), (32, 65, 40), (32, 65, 49), (32, 65, 57), (32, 65, 65), (32, 57, 65), (32, 49, 65), (32, 40, 65),
(45, 45, 65), (49, 45, 65), (53, 45, 65), (61, 45, 65), (65, 45, 65), (65, 45, 61), (65, 45, 53), (65, 45, 49),
(65, 45, 45), (65, 49, 45), (65, 53, 45), (65, 61, 45), (65, 65, 45), (61, 65, 45), (53, 65, 45), (49, 65, 45),
(45, 65, 45), (45, 65, 49), (45, 65, 53), (45, 65, 61), (45, 65, 65), (45, 61, 65), (45, 53, 65), (45, 49, 65),
(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)
]

# Verify palette size
assert len(VGA_PALETTE) == 256, f"Palette size is {len(VGA_PALETTE)}, expected 256"

def convertimage(filepath, savepath):
    # Open the image
    image = Image.open(filepath)

    # Convert the image to RGB mode if itâ€™s not already
    image = image.convert("RGB")

    # Resize the image to 320x200 pixels
    resized_image = image.resize((320, 200), Image.Resampling.LANCZOS)

    # Reduce the image to 16 colors (outputs in "P" mode)
    quantized_image = resized_image.quantize(colors=256, method=Image.Quantize.MEDIANCUT)

    quantized_image.save("temp.bmp")
    png_to_vga_raw("temp.bmp", savepath)

def png_to_vga_raw(input_path, output_path):
    if not output_path.lower().endswith(".raw"):
        output_path += ".raw"

    img = Image.open(input_path).convert("RGB")
    img = img.resize((320, 200), Image.NEAREST)
    img_array = np.array(img, dtype=np.uint8)
    
    # Reshape to (320*200, 3) for vectorized computation
    pixels = img_array.reshape(-1, 3).astype(np.float32)  # Cast to float32
    vga_array = np.array(VGA_PALETTE, dtype=np.float32)
    
    # Compute squared differences for all pixels and palette colors at once
    diff = pixels[:, np.newaxis, :] - vga_array[np.newaxis, :, :]
    dists = np.sum(diff ** 2, axis=2)  # Sum along RGB axis
    raw_data = np.argmin(dists, axis=1).reshape(200, 320).astype(np.uint8)
    
    with open(output_path, 'wb') as f:
        f.write(raw_data.tobytes())
    
    os.remove("temp.bmp") 
    
    print(f"Converted {input_path} to {output_path}")