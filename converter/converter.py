from PIL import Image
from tkinter import filedialog
import numpy as np
import os

# Full VGA 256-color palette (RGB values)
VGA_PALETTE = [
(0, 0, 0), (0, 0, 169), (0, 169, 0), (0, 169, 169), (169, 0, 0), (169, 0, 169), (169, 85, 0), (169, 169, 169),
(85, 85, 85), (85, 85, 255), (85, 255, 85), (85, 255, 255), (255, 85, 85), (255, 85, 255), (255, 255, 85), (255, 255, 255),
(0, 0, 0), (16, 16, 16), (32, 32, 32), (48, 48, 48), (64, 64, 64), (80, 80, 80), (96, 96, 96), (112, 112, 112),
(128, 128, 128), (144, 144, 144), (160, 160, 160), (176, 176, 176), (192, 192, 192), (208, 208, 208), (224, 224, 224), (240, 240, 240),
(0, 0, 255), (0, 0, 239), (0, 0, 223), (0, 0, 207), (0, 0, 191), (0, 0, 175), (0, 0, 159), (0, 0, 143),
(0, 0, 127), (0, 0, 111), (0, 0, 95), (0, 0, 79), (0, 0, 63), (0, 0, 47), (0, 0, 31), (0, 0, 15),
(0, 255, 0), (0, 239, 0), (0, 223, 0), (0, 207, 0), (0, 191, 0), (0, 175, 0), (0, 159, 0), (0, 143, 0),
(0, 127, 0), (0, 111, 0), (0, 95, 0), (0, 79, 0), (0, 63, 0), (0, 47, 0), (0, 31, 0), (0, 15, 0),
(255, 0, 0), (239, 0, 0), (223, 0, 0), (207, 0, 0), (191, 0, 0), (175, 0, 0), (159, 0, 0), (143, 0, 0),
(127, 0, 0), (111, 0, 0), (95, 0, 0), (79, 0, 0), (63, 0, 0), (47, 0, 0), (31, 0, 0), (15, 0, 0),
(255, 255, 0), (239, 239, 0), (223, 223, 0), (207, 207, 0), (191, 191, 0), (175, 175, 0), (159, 159, 0), (143, 143, 0),
(127, 127, 0), (111, 111, 0), (95, 95, 0), (79, 79, 0), (63, 63, 0), (47, 47, 0), (31, 31, 0), (15, 15, 0),
(0, 255, 255), (0, 239, 239), (0, 223, 223), (0, 207, 207), (0, 191, 191), (0, 175, 175), (0, 159, 159), (0, 143, 143),
(0, 127, 127), (0, 111, 111), (0, 95, 95), (0, 79, 79), (0, 63, 63), (0, 47, 47), (0, 31, 31), (0, 15, 15),
(255, 0, 255), (239, 0, 239), (223, 0, 223), (207, 0, 207), (191, 0, 191), (175, 0, 175), (159, 0, 159), (143, 0, 143),
(127, 0, 127), (111, 0, 111), (95, 0, 95), (79, 0, 79), (63, 0, 63), (47, 0, 47), (31, 0, 31), (15, 0, 15),
(127, 63, 0), (127, 79, 15), (127, 95, 31), (127, 111, 47), (127, 127, 63), (127, 143, 79), (127, 159, 95), (127, 175, 111),
(127, 191, 127), (127, 207, 143), (127, 223, 159), (127, 239, 175), (127, 255, 191), (143, 255, 207), (159, 255, 223), (175, 255, 239),
(63, 127, 0), (79, 127, 15), (95, 127, 31), (111, 127, 47), (127, 127, 63), (143, 127, 79), (159, 127, 95), (175, 127, 111),
(191, 127, 127), (207, 127, 143), (223, 127, 159), (239, 127, 175), (255, 127, 191), (255, 143, 207), (255, 159, 223), (255, 175, 239),
(0, 127, 63), (15, 127, 79), (31, 127, 95), (47, 127, 111), (63, 127, 127), (79, 127, 143), (95, 127, 159), (111, 127, 175),
(127, 127, 191), (143, 127, 207), (159, 127, 223), (175, 127, 239), (191, 127, 255), (207, 143, 255), (223, 159, 255), (239, 175, 255),
(0, 63, 127), (15, 79, 127), (31, 95, 127), (47, 111, 127), (63, 127, 127), (79, 143, 127), (95, 159, 127), (111, 175, 127),
(127, 191, 127), (143, 207, 127), (159, 223, 127), (175, 239, 127), (191, 255, 127), (207, 255, 143), (223, 255, 159), (239, 255, 175),
(63, 0, 127), (79, 15, 127), (95, 31, 127), (111, 47, 127), (127, 63, 127), (143, 79, 127), (159, 95, 127), (175, 111, 127),
(191, 127, 127), (207, 143, 127), (223, 159, 127), (239, 175, 127), (255, 191, 127), (255, 207, 143), (255, 223, 159), (255, 239, 175),
(127, 0, 63), (127, 15, 79), (127, 31, 95), (127, 47, 111), (127, 63, 127), (127, 79, 143), (127, 95, 159), (127, 111, 175),
(127, 127, 191), (127, 143, 207), (127, 159, 223), (127, 175, 239), (127, 191, 255), (143, 207, 255), (159, 223, 255), (175, 239, 255),
(191, 191, 191), (195, 195, 195), (199, 199, 199), (203, 203, 203), (207, 207, 207), (211, 211, 211), (215, 215, 215), (219, 219, 219),
(223, 223, 223), (227, 227, 227), (231, 231, 231), (235, 235, 235), (239, 239, 239), (243, 243, 243), (247, 247, 247), (251, 251, 251),
(255, 255, 255), (255, 251, 255), (255, 247, 255), (255, 243, 255), (255, 239, 255), (255, 235, 255), (255, 231, 255), (255, 227, 255),
(255, 223, 255), (255, 219, 255), (255, 215, 255), (255, 211, 255), (255, 207, 255), (255, 203, 255), (255, 199, 255), (255, 195, 255)
]

# Verify palette size
assert len(VGA_PALETTE) == 256, f"Palette size is {len(VGA_PALETTE)}, expected 256"

def convertimage(filepath, savepath):
    # Open the image
    image = Image.open(filepath)

    # Convert the image to RGB mode if itâ€™s not already
    image = image.convert("RGB")

    # Resize the image to 320x200 pixels
    resized_image = image.resize((320, 200), Image.Resampling.LANCZOS)

    # Reduce the image to 16 colors (outputs in "P" mode)
    quantized_image = resized_image.quantize(colors=256, method=Image.Quantize.MEDIANCUT)

    quantized_image.save("temp.bmp")
    png_to_vga_raw("temp.bmp", savepath)

def png_to_vga_raw(input_path, output_path):
    if not output_path.lower().endswith(".raw"):
        output_path += ".raw"

    img = Image.open(input_path).convert("RGB")
    img = img.resize((320, 200), Image.NEAREST)
    img_array = np.array(img, dtype=np.uint8)
    
    # Reshape to (320*200, 3) for vectorized computation
    pixels = img_array.reshape(-1, 3).astype(np.float32)  # Cast to float32
    vga_array = np.array(VGA_PALETTE, dtype=np.float32)
    
    # Compute squared differences for all pixels and palette colors at once
    diff = pixels[:, np.newaxis, :] - vga_array[np.newaxis, :, :]
    dists = np.sum(diff ** 2, axis=2)  # Sum along RGB axis
    raw_data = np.argmin(dists, axis=1).reshape(200, 320).astype(np.uint8)
    
    with open(output_path, 'wb') as f:
        f.write(raw_data.tobytes())
    
    os.remove("temp.bmp") 
    
    print(f"Converted {input_path} to {output_path}")